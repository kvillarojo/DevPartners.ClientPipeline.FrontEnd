{"version":3,"sources":["containers/Login/Login.js","actions/loginActions.js"],"names":["Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","bind","assertThisInitialized","e","preventDefault","formData","field","refs","value","loginUser","_this$props","fetching","userLoggedIn","react_default","a","createElement","react_router","to","className","href","src","require","alt","onSubmit","type","ref","placeholder","disabled","react_loader_spinner_default","color","height","width","Component","connect","state","loginReducer","error","isUserlogIn","dispatch","loginCredentials","types"],"mappings":"+MAMMA,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IAFLA,4EAKNU,GACXA,EAAEC,iBACF,IAAMC,EAAW,GACjB,IAAK,IAAMC,KAASV,KAAKW,KACzBF,EAASC,GAASV,KAAKW,KAAKD,GAAOE,MAEnCZ,KAAKJ,MAAMiB,UAAUJ,oCAGd,IAAAK,EAC8Bd,KAAKJ,MAAhCmB,EADHD,EACGC,SACR,OAFKD,EACaE,aAETC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,GAAG,MAIlBJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAAA,KAAGI,KAAK,0BAAyBN,EAAAC,EAAAC,cAAA,OAAKK,IAAKC,EAAQ,IAA8CC,IAAI,GAAGJ,UAAU,eAClHL,EAAAC,EAAAC,cAAA,QAAMQ,SAAU3B,KAAKI,cACnBa,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uBACXL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,oBAAmBL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBAEpDL,EAAAC,EAAAC,cAAA,SAAOS,KAAK,OAAON,UAAU,eAAeO,IAAI,WAAWC,YAAY,cAE3Eb,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uBACXL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,oBAAmBL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBAEpDL,EAAAC,EAAAC,cAAA,SAAOS,KAAK,WAAWN,UAAU,eAAeO,IAAI,WAAWC,YAAY,cAE/Eb,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACXL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,mCAAmCM,KAAK,SAASG,SAAUhB,GAA7E,YAEJE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACXL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,SAASC,KAAK,YAAYQ,SAAUhB,GAAjD,oBAOfA,EAAYE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WAAWL,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAQU,KAAK,QAAQK,MAAM,aAAaC,OAAQ,GAAIC,MAAO,MAAe,aAtD7GC,aA2EHC,sBAfO,SAACC,GAErB,MAAO,CACHvB,SAAUuB,EAAMC,aAAaxB,SAC7ByB,MAAOF,EAAMC,aAAaC,MAC1BxB,aAAcsB,EAAMC,aAAaE,cAIZ,SAAAC,GACzB,MAAO,CACL7B,UAAW,SAACD,GAAD,OAAW8B,GC3EOC,ED2EqB/B,EC3EC,CACrDgB,KAAMgB,IACND,sBAF8B,IAACA,KD+ElBN,CAA6C1C","file":"static/js/10.977ec171.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginRequestAction } from '../../actions/loginActions';\r\nimport Loader from 'react-loader-spinner';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    \r\n    handleSubmit(e) {\r\n      e.preventDefault();\r\n      const formData = {};\r\n      for (const field in this.refs) {\r\n      formData[field] = this.refs[field].value;\r\n      }\r\n      this.props.loginUser(formData);\r\n    }\r\n\r\n    render() {\r\n        const { fetching, userLoggedIn } = this.props;\r\n        if(userLoggedIn){\r\n          return <Redirect to='/'/>\r\n        }\r\n\r\n        return(\r\n            <div className=\"loginContainer\">\r\n              <div className=\"container\">\r\n                <div className=\"loginForm\">\r\n                    <div className=\"center-content\">\r\n                        <a href=\"https://devpartners.co\"><img src={require('../../common/photos/devpartners-logo.png')}  alt=\"\" className=\"loginLogo\" /></a>\r\n                        <form onSubmit={this.handleSubmit}>\r\n                          <div className=\"input-group\">\r\n                              <div className=\"input-group-prepend\">\r\n                                  <span className=\"input-group-text\"><i className=\"fas fa-user\"></i></span>\r\n                              </div>\r\n                              <input type=\"text\" className=\"form-control\" ref=\"username\" placeholder=\"Username\" />\r\n                          </div>\r\n                          <br/>\r\n                          <div className=\"input-group\">\r\n                              <div className=\"input-group-prepend\">\r\n                                  <span className=\"input-group-text\"><i className=\"fas fa-lock\"></i></span>\r\n                              </div>\r\n                              <input type=\"password\" className=\"form-control\" ref=\"password\" placeholder=\"Password\" />\r\n                          </div>\r\n                          <br/>\r\n                          <div className=\"form-inline\">\r\n                            <div className=\"crm-group\">\r\n                                <button className=\"btn btn-primary btn-md crm-right\" type=\"submit\" disabled={fetching}> Login </button>\r\n                            </div>\r\n                            <div className=\"crm-group\">\r\n                                <a className=\"btn-md\" href=\"/register\" disabled={fetching}> Register </a>\r\n                             </div>\r\n                          </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n              </div>\r\n              { (fetching) ? <div className=\"loading\" ><Loader type=\"Audio\" color=\"#somecolor\" height={80} width={80} /></div> : null}\r\n            </div>   \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    \r\n    return {\r\n        fetching: state.loginReducer.fetching,\r\n        error: state.loginReducer.error,\r\n        userLoggedIn: state.loginReducer.isUserlogIn\r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = dispatch => {\r\n    return {\r\n      loginUser: (value) => dispatch(loginRequestAction(value))\r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Login);","import * as types from '../constants/actionTypes';\r\n\r\nexport const loginRequestAction = (loginCredentials) => ({\r\n    type: types.API_LOGIN_REQUEST,\r\n    loginCredentials\r\n});"],"sourceRoot":""}